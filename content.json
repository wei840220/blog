{"posts":[{"title":"Gulp 建立自己的自動化程序","text":"前言在進行網頁開發的時候，過程中可能有許多問題需要處理，以我的開發習慣來舉例： 編譯 SASS, Pug 壓縮 .css, .js 或圖檔 修改完成之後要不斷 F5 重整頁面 諸如此類… 雖然很多工具都可以完成各別的功能，但這樣在開發的過程中反而顯得相當沒效率，這時候我們就可以利用 Gulp 來協助我們建立自己的自動化程序。 安裝全域 GulpGulp 是 Node.js 的套件，所以必須先安裝 Node.js 才可以安裝。 檢查 npm 版本，3.0.2 以上才可順利安裝 Gulp 1npm --version 安裝全域 Gulp 1npm install gulp --global 安裝 Gulp 套件首先要進行專案初始化，在專案資料夾底下輸入 1npm init 安裝所要使用的套件，會產生一個 node_modules 資料來存放所有套件 1npm install gulp gulp-sass gulp-pug gulp-uglify gulp-imagemin gulp-connect gulp-livereload -save-dev 我個人常用的套件有下面這些： gulp-sass：CSS preprocessor，內建 CSS 檔案壓縮 gulp-pug：HTML 的模板，原名是 Jade gulp-uglify：JavaScript 混淆與檔案壓縮 gulp-imagemin：自動壓縮圖檔，支援 PNG, JPEG, GIF 和 SVG gulp-connect：在本地建立起網頁伺服器 gulp-livereload：以伺服器方式打開網頁，搭配 chrome 插件自動刷新頁面 資料夾結構在使用 Gulp 時，資料夾結構會影響到 Gulp 配置檔（gulpfile.js）的部分。 以下是我的資料夾結構配置： 12345678910111213|- src/ #開發時的專案檔案資料夾 |- images/ |- index.js |- style.sass |- index.pug|- dist/ #最終專案匯出的資料夾 |- images/ |- index.js |- style.css |- index.html|- gulpfile.js|- package.json|- node_modules/ 建立 gulpfile.js接下來在專案目錄下建立 gulpfile.js，這裡就不贅述細節，直接附上程式碼。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465// import pluginvar gulp = require('gulp'), sass = require('gulp-sass') pug = require('gulp-pug') uglify = require('gulp-uglify') imagemin = require('gulp-imagemin') connect = require('gulp-connect') livereload = require('gulp-livereload');// file pathsconst stylePath = {src: 'src/*.sass', dest: 'dist'};const htmlPath = {src: 'src/*.pug', dest: 'dist'};const scriptPath = {src: 'src/*.js', dest: 'dist'};const imagePath = {src: 'src/images/**', dest: 'dist/images'};// defaultgulp.task('default', ['sass', 'pug', 'js', 'images', 'server', 'watch']);// gulp-connectgulp.task('server', function() { connect.server({ root: '', livereload: true, });});// gulp-sassgulp.task('sass', function() { return gulp.src(stylePath.src) .pipe(sass()) // compile sass into CSS .pipe(gulp.dest(stylePath.dest)) .pipe(connect.reload())});// gulp-puggulp.task('pug', function() { return gulp.src(htmlPath.src) .pipe(pug({ // compile pug into HTML pretty: true })) .pipe(gulp.dest(htmlPath.dest)) .pipe(connect.reload())});// gulp-uglifygulp.task('js', function () { return gulp.src(scriptPath.src) .pipe(uglify()) // minify JavaScript .pipe(gulp.dest(scriptPath.dest)) .pipe(connect.reload())});// gulp-imagemin gulp.task('images', function() { return gulp.src(imagePath.src) .pipe(imagemin()) // minify images .pipe(gulp.dest(imagePath.dest)) });// watchgulp.task('watch', function() { gulp.watch(htmlPath.src, ['pug']); gulp.watch(stylePath.src, ['sass']); gulp.watch(scriptPath.src, ['js']); gulp.watch(imagePath.src, ['images']);}); 執行 gulp輸入 gulp 就可以開始執行我們的自動化流程了！ 每當有新專案時，只要複製前個專案的 package.json 和 gulpfile.js 再執行 npm install 就可以了。 我也把模板放上了 Github，日後也可以直接 fork 下來。 參考資料 gulp 學習筆記 Gulp 基礎入門 - 2017 Gulp 學習 - 建立 SCSS/SASS 編輯環境","link":"/posts/c606cc8a/"},{"title":"HTML5 的資料屬性 (data-* attribute)","text":"前言常常在 html 之中看到形如 data-* attribute 的資料屬性，以下面這段程式碼為例： 123456&lt;div class=\"controls\" data-uid=\"${session_user.id}\"&gt; &lt;span id=\"like_post\" class=\"s_${post.favorite}\"&gt; &lt;a void class=\"do pif-like\" data-function=\"like\"&gt;${_(\"like\")}&lt;/a&gt; &lt;a void class=\"undo pif-like\" data-function=\"unlike\"&gt;${_(\"unlike\")}&lt;/a&gt; &lt;/span&gt;&lt;/div&gt; 這段程式碼之中，有的元素被賦予了 data-uid 的屬性，有的則是被賦予了 data-function 的屬性。 然而如果你直接 google data-uid 或是 data-function 卻也查不太到這個屬性，這到底是什麼？又有什麼意義或用途呢？ HTML5 中的 data-* attributeHTML5 中的 data-* attribute 事實上是一種自定義的屬性，讓我們可以上所有 HTML 元素之中嵌入自定義的屬性，而之所以會有這個自定義屬性的出現，不只是為了方便 programer 能理解，同時最後也能再經由 JavaScript / jQuery 去存取。 data-* attribute 屬性包含兩個部分： 屬性名稱不能包含任何大寫字母，同時在前綴字 data- 之後則必須至少要有一個字 屬性值則可以是任何的字串 由於這是一個自定義名稱，所以當我們想去 google data-uid 或是 data-function 也就會找不到答案。 利用 JavaScript 來取值當我們想取得 data-* attribute 的屬性值時，我們可以利用 JavaScript 的 dataset 物件來存取。 以前面的程式碼為例，假如我們想取得 #like_post 之中的 data-function ，可以寫成這樣： 12var ele = document.getElementById('like_post'); var func = ele.dataset.function; 如果考慮瀏覽器相容性，也可以利用 getAttribute 去操作，然而速度與可讀性上還是 dataset 較佳。 利用 jQuery 來取值利用 jQuery 更是方便，使用內建的 .data() 就能夠存取我們想要的屬性值了，能寫成這樣： 12var ele = document.getElementById('like_post'); var func = ele.data('function'); 是不是相當的方便呢？只要能善用 data-* attribute ，就能夠幫助我們更有效率地去存取這些值。","link":"/posts/2bb3134/"},{"title":"JSON & AJAX 基本觀念與實作","text":"前言之前在學校課程中實作資料庫內容的呈現時，是利用 PHP + MySQL 做資料的傳遞，然而在前後端分離的工作模式之中，只要前端從後端 API 那裡接到產出的資料，就可以直接執行頁面上的資料呈現與處理。 本文所要實作的內容如下： 建構 JSON data file 存放預設資料 透過 jQuery 語法 ( Ajax ) 讀取資料 也就是說著重在前端接取資料並呈現的部分，不包含後端產生 JSON data file 的工作。 什麼是 JSONJSON（JavaScript Object Notation） 是一種輕量級的資料交換語言，後端透過資料庫整理成線上 JSON 格式 ，提供給前端使用，我們可以再經由 jQuery 去存取。 JSON 支援的資料型態有 string, number, array, object 等等，主要的宣告與 Javascript 無異，只是有些細節要注意： 名稱為字串，必須用成對雙引號 “” 包括 值可以是雙引號包括的字串、數字、true、false、null、物件或者是陣列。 不支援 JavaScript 的 Date、Error、規則表示式或函式表示。 建立 JSON data file首先，我想建立一個存有餐廳名稱的物件陣列，可以每次自動讀取我喜歡的餐廳。所以我準備了一個 JSON 檔案data.json，其內容如下： 12345678[ {\"name\": \"西堤牛排\"}, {\"name\": \"欣葉日本料理\"}, {\"name\": \"屯京拉麵\"}, {\"name\": \"一番地壽喜燒\"}, {\"name\": \"銀湯匙\"}, {\"name\": \"原燒\"}] 在我們開始著手讀取 JSON data file 之前，還有兩個不可不知的函數： JSON.stringify() JSON.parse() JavaScript variable to JSON string利用 JSON.stringify() 函數，我們可以把 JavaScript variable 轉換成 JSON 所表示的 string，範例如下： 1234567891011var rlist = [ {\"name\": \"西堤牛排\"}, {\"name\": \"欣葉日本料理\"}, {\"name\": \"屯京拉麵\"}, {\"name\": \"一番地壽喜燒\"}, {\"name\": \"銀湯匙\"}, {\"name\": \"原燒\"}];var jsonText = JSON.stringify(rlist);console.log(typeof jsonText); // string JSON string to JavaScript variable利用 JSON.parse() 函數，我們可以把 JSON string 轉換成 JavaScript 中可以運用的物件，範例如下： 1234var jsonText = '[{\"name\":\"西堤牛排\"},{\"name\":\"欣葉日本料理\"},{\"name\":\"屯京拉麵\"},{\"name\":\"一番地壽喜燒\"},{\"name\":\"銀湯匙\"},{\"name\":\"原燒\"}]';var rlist = JSON.parse(jsonText);console.log(typeof rlist); // object Ajax 非同步載入技術開始資料讀取之前，我們先瞭解一下大名鼎鼎的 Ajax 是什麼吧！ Ajax 即「Asynchronous JavaScript and XML」（非同步的JavaScript與XML技術），基本上的核心概念就是追求提升使用者的體驗，為了達成這個目的而有動態傳輸的做法。 Ajax 最大的特色就是可以直接動態傳送、接收資料。相較之下，如果是傳統的網頁技術，Server 在接受指令之後，處理完成後還要再重新導向另一個頁面。 除此之外也還有其他的好處： 提升使用者體驗，減少頁面跳轉時產生的落差 節省網路流量，不傳送重複的版面資訊 能達到跨平台、跨網域、跨瀏覽器互動的可能 而 JSON 因小巧與瀏覽器內建快速解析支援，因此較適用於網路資料傳輸領域，是目前常應用在 Ajax 的資料傳輸格式。 利用 Ajax 讀取資料接下來讓我們利用 jQuery.ajax 來讀取放在 Json data file 中的資料，範例如下： 123456789101112$.ajax({ url: dataurl, // \"data.json\" dataType: \"json\", error: function(){ console.log(\"error\"); }, success: function(res){ console.log(\"success\"); rlist = res; update(); // 負責更新資料的 update function }}); $.ajax() 當中的參數說明： url (String)：指定要進行呼叫的位址。 dataType (String)：返回的資料類型 - xml, html, script, json, jsonp, text。不設定的話 jQuery 會幫你猜返回的內容格式是什麼。 success：請求成功時執行函式。 error：請求失敗時執行函式。 瞭解這些以後，基本上我們就可以利用後端 API 輸出的 JSON string 去處理並呈現網頁上的資料囉！","link":"/posts/6468559b/"},{"title":"Vue.js 新手上路","text":"前言在開始學習今天的主題之前，我們要來先討論一下：為什麼要學框架（Framework）？因為很潮正夯特流行嗎？因為業界好找工作嗎？又有什麼是只用 jQuery 辦不到的事情嗎？ 簡單來說，jQuery 是以 DOM 元素來觸發功能，能幫助我們更簡單的實現網頁上的資料互動及事件處理方法，同時也簡化了許多 AJAX 的操作方法，是設計動畫效果的絕佳利器。 然而 框架（Framework） 包括你聽過的三神獸 Vue, Angular, React，都是以資料來驅動功能，適合用來撰寫一些以資料為主體的網頁以及 SPA，能幫助我們更加簡潔地去處理資料邏輯。 進入 Vue.js 世界讓我們先寫一個簡單的 Vue 建構式（Vue Vonstructor） 來建立 view model ： 12345678910var app = new Vue({ el: '.app', // 要綁定的 DOM element，即作用範圍 data: { // 資料綁定 msg: 'Hello World!', users: [{name: 'Tom', gender: 'male', age: 20},{name: 'Alice', gender: 'female', age: 18}] , isActive: true }, computed: {}, // 當資料改變時，對應更新的變動值 methods: {} // 可以定義在元件或樣板內使用的 method}); 資料綁定 Data Bindingdata 的作用 儲存元件內部狀態或資料 和 v-model 合作實現雙向綁定 利用 Mustache 的雙括號語法以及 模板語法 可以直接將 data 的值置入 123&lt;div class=\"app\"&gt; &lt;h1&gt;{{msg}}&lt;/h1&gt;&lt;/div&gt; v-bind雙括號語法不能直接寫入 html 的屬性之中，需使用 v-bind 語法作屬性綁定，縮寫為 : 12345678&lt;div class=\"app\"&gt; &lt;div class=\"title\"&gt; &lt;h1&gt;{{msg}}&lt;/h1&gt; &lt;/div&gt; &lt;ul class=\"userList\" :class=\"{ active: isActive }\"&gt; &lt;li class=\"userItem\" v-for=\"item in users\" :key=\"item.id\"&gt;{{item.name}}&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; 其他模板語法 v-if , v-else-if, v-else形如 v-if=&quot;boolean&quot; , v-else-if=&quot;boolean&quot; , v-else類似 Handlebars.js 中的 {{#if boolean}} , {{else}} v-show形如 v-show=&quot;boolean&quot;類似 v-if，不過會保留 DOM 元素本身，只是改變 display: none v-for形如 v-for=&quot;item in array&quot;類似 Handlebars.js 中的 {{#each item}} 屬性計算 Computed Propertries我們可以直接利用 computed 來幫助我們 處理雙括號表達式的資料邏輯 12345computed: { // 當資料改變時，對應更新的變動值 userNum: function(){ return users.length; }}, computed 有以下特點 function 本身無法帶入外部參數 具有資料緩存的功能，不會每次都重新渲染當使用的 data 中的對應值變動，computed 裡的值才會自動更新 Methods 與事件處理methods我們可以在 methods 裡面定義可被 vue 物件呼叫的 function 1234methods: { // 可以定義在元件或樣板內使用的 method addFollow: function(user){ // ... } 而在 function 裡呼叫的 this 會自動綁定為呼叫這個 function 的物件同時必須注意的是，也就不能使用 ES6 中的箭頭函數來定義 method function v-on使用 v-on 語法作事件處理的綁定，縮寫為 @ 1234567&lt;div class=\"app\"&gt; &lt;ul class=\"userList\" :class=\"{ active: isActive }\"&gt; &lt;li class=\"userItem\" v-for=\"item in users\" :key=\"item.id\"&gt;{{item.name}} &lt;a void @click=\"setFollow(item)\"&gt;Follow&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; 再去呼叫我們在 methods 中所定義的 function 雙向綁定v-modelv-model 可以幫助我們實現雙向綁定，也就是說去動態同步更改 data 的資料，在表單呈現上特別好用限用於&lt;input&gt;、&lt;select&gt;和&lt;textarea&gt; 1234&lt;div class=\"app\"&gt; &lt;h1&gt;{{msg}}&lt;/h1&gt; &lt;input type=\"text\" v-model=\"msg\"&gt;&lt;/div&gt; Todos with Vue.js利用前面所提及的各種方法，實作出一個簡單的 todo list See the Pen todos with vue.js by Veru (@veru) on CodePen. 實作功能 可新增/刪除 todo 可將 todo 標示完成 顯示未完成的 todo 數量 可切換不同分頁：全部/未完成/已完成 快捷鍵：完成所有 todo/刪除已完成 todo 參考資料 Vue.js 官方文件 第一次用 Vue.js 就愛上 Summer 的 Vue.js 學習筆記總整理","link":"/posts/7694b685/"},{"title":"什麼是 SSL？讓 Cloudflare 幫你啟用 HTTPS","text":"前言當你使用 Chrome 瀏覽器時，是否曾留意過網址列出現的「不安全」？ 尤其辛辛苦苦架好網站，甚至加上自訂域名，卻看到那幾個字，顯得格外刺眼——為什麼會出現這個呢？ 這是因為 Google 鼓勵網站加上 SSL 憑證，那些能以 HTTPS 加密通訊協定存取的網站，就會加上綠色鎖頭字樣！甚至還列入了搜尋演算法的指標中，影響 SEO 排名。 話說到這裡，這個 SSL 憑證到底是什麼？ SSL - Secure Sockets Layer（通訊安全協定）SSL 的原文是 Secure Sockets Layer，聽起來好像很複雜，其實本意是為了保護使用者的個人資料、聯絡方式、付款資訊不被第三方所攔截的技術。 運作原理就是在瀏覽器拜訪網站時，會向對應的伺服器要求建立安全連線，這部分會協議使用的加密演算法或是密鑰交換演算法等機制，協議出一份密鑰來認證。 同時為了真正確保協議過程中的安全，除了協議的內容，伺服器還要回傳 CA（Certificate Authority，數位憑證），這是第三方的認證，來讓使用者端確認不是冒用身分。 協議完成後，就可以按照協議進行加密、傳送資料了！經過加密的資料，即使第三方有心人士竊取到資料，也會因為缺少解密金鑰而無法得到正確訊息，只能看到亂碼。 在原本的 HTTP 協定中加入 SSL 憑證的通訊安全協定，就是 HTTPS 協定。 用 Cloudflare 加上 SSL 憑證我們可以使用 Cloudflare 的 DNS 代管服務，來免費使用 SSL 憑證。只要將網域設為代管後，就能掛上 SSL 加密連線，擁有綠色鎖頭。 讓我們先申請 Cloudflare 服務吧！首先要讓 Cloudflare 來解析域名。 申請 DNS 託管註冊/登入後，點選 Add Site。 選擇免費方案，就可以使用 SSL 憑證囉。 解析後可能會有一些錯誤訊息，這部分通常與域名服務商中的 DNS 設定有關。我的域名服務商是 Google Domains，後面會以 Google Domains 作為操作示範。 幾個常見錯誤訊息如下： An MX record was not found for your root domain. An MX record is required for mail to reach @自訂域名 addresses.如果有設定自訂電子郵件地址，自訂紀錄就必須設定 MX，沒設定可忽略。 An A, AAAA or CNAME record was not found for the www subdomain. The 自訂域名 subdomain will not resolve.代表沒設定 A 或 CNAME，必須填齊。 由於我是使用 Github Pages，所以指向的 IP 是以下四組。 1234185.199.108.153185.199.109.153185.199.110.153185.199.111.153 設定名稱伺服器接下來要把域名服務商的名稱伺服器，改成使用自訂名稱伺服器。 填上 Cloudflare 所給的兩組名稱伺服器，儲存後回到 Cloudflare 去 Re-check。 更新可能要很久，過一段時間再回來確認吧。生效後，就會看到出現啟用狀態，代表 DNS 託管設定完成。 啟用 SSL 憑證接下來終於可以使用 SSL 憑證了！點開 SSL/TLS 來確認吧。 Cloudflare 通常會自動使用 SSL 憑證，設定是 Fiexible，代表確實運作中，看見網址列出現鎖頭就完成了。 Off未啟用 SSL FlexibleCloudFlare 會透過 HTTP 存取伺服器，再透過 HTTPS 跟使用者連線，所以使用者可以透過 HTTPS 連線到網站 FullCloudFlare 會透過 HTTPS 存取伺服器，同時也透過 HTTPS 跟使用者連線 Full (Strict)強制使用 HTTPS 連線，但 Cloudflare 會檢查第三方是不是信任憑證（不可自簽） 設定自動跳轉最後要確保網站的所有訪問都是基於 HTTPS 協定，所以要讓 HTTP 自動跳轉到 HTTPS。 點開 SSL/TLS 底下的 Edge Certificates 分頁，找到 Always Use HTTPS 並打開。 這樣即使使用者在網址列輸入的是 HTTP，也會自動跳轉囉！ 結語現在網站擁有 SSL 憑證了，原理是透過握手技術（Handshake）以及公私鑰加密，來達成資料加密的連線。不僅是安全，對於 SEO 也有優勢。 這之中利用了 CloudFlare 代管 DNS，提供免費的 SSL 憑證服務。事實上 CloudFlare 能做到的可不只這樣，光是免費方案就提供了基本的安全防護、網站加速等其他功能，日後也可按需求付費升級。 我自己比較常用到的是這些： Analytics 以檢視網站分析 Speed 啟用 Auto Minify Page Rules 自訂頁面規則 你的網站還沒有 SSL 憑證嗎？不如現在就試試看吧！","link":"/posts/747bdc82/"},{"title":"使用 Sublime SFTP 同步檔案","text":"前言在開始介紹 SFTP 以前，我們要先聊聊 SSH (Secure Shell) 協定。沒聽過 SSH 嗎？ 那你或許有聽過 Telnet，沒錯！就是廣大鄉民們平常用來上 PTT 的連線協定。Telnet 易用，速度又快，只要執行 Telnet 程式來連線到遠端伺服器，使用者輸入帳密後便可以遠端控制主機。 但是由於 Telnet 傳輸的資料並未加密，所以容易遭到竊取，後來 SSH 橫空出世，SSH 預設是以金鑰為基礎來驗證及加密傳輸，也可以省去輸入帳號密碼的步驟，大家也就多改用較為安全的 SSH。 SSH（Secure Shell）接下來我們進一步介紹 SSH 協定的運作原理： 靠加密編碼的演算法，產生一組很長又混亂的字串及檔案 這組資料分別為私鑰 (private key) 與公鑰 (public key) 接著將公鑰傳至想要可以免帳號密碼登入的主機上 登入主機進行驗證後，主機就會認為你是經過驗證的使用者，就可以登入囉。 在 OSX 與 Linux 環境下產生 SSH key由於 OS X 跟 Linux 都是 Unix-Like 系統，所以產生的方式都一樣。步驟如下： 使用內建的終端機 ssh-keygen 建立 ssh key ls -al 會看到生成了兩個檔案：id_rsa.pub id_rsa也就是你所持有的公鑰與私鑰 把 id_rsa.pub 的內容加入 server 端的 ~/.ssh/authorized_keys 建立連線 ssh USER@SSH_SERVER 在 Windows 環境下產生 SSH key在 Windows 中有兩種類型的程式可以支援 SSH： OpenSSH - 安裝完 git 會自動安裝 PuTTY 使用 OpenSSH 的步驟如下： 使用 PowerShell 安裝 git 會順便安裝 OpenSSH 先建立 .ssh 的資料夾通常安裝 git 的時候在產生 github_rsa 的時候就已經建好了 ssh-keygen 建立 ssh key ls 會看到生成了兩個檔案：id_rsa.pub id_rsa 把 id_rsa.pub 的內容加入 server 端的 ~/.ssh/authorized_keys 建立連線 ssh USER@SSH_SERVER 雖然可以順利的手動連線，但是很遺憾的，OpenSSH 的公鑰/私鑰的格式和 Linux 環境之下是不同的，由於我們之後還想要使用 SFTP，為了避免在後續操作會導致 Sublime SFTP Connection timeout，那就必須利用 puttygen.exe 對公鑰/私鑰進行格式轉換。 這樣做實在太麻煩了，不如我們就直接使用 puttygen.exe 來生成金鑰吧： 使用 PowerShell 下載 puttygen.exe，打開之後點選 Generate滑鼠在 key 區空白位置晃動，可加快生成隨機數 在 key comment 填寫備註 在 key passphras 填寫 key 的密碼，如同前面步驟，也可以選擇不設置 把上方框框中的內容，也就是公鑰複製到 server 端的 /.ssh/authorized_keys 之中 點擊 puttygen.exe 中的 Save private key，保存私鑰 id_rsa.ppk 建立連線 ssh USER@SSH_SERVER 使用 Sublime SFTP 同步檔案12註：本文撰寫於 2017/08，我後來跳槽使用 VSCode。官方直接支援 SSH 連線到伺服器進行開發，我認為方便多了。 來到本文的正題，也就是如何在 Sublime Text3 上借助 SFTP 這個套件來幫助我們更加快速與便利地去建立 SSH 連線和管理檔案： 安裝 SFTP如同其他套件，利用 package control install package 輸入 sftp 後就會自動下載 配置文件在第一次執行之前，我們必須設定配置文件 sftp-sonfig.json簡單介紹幾個選項 連線設定 type 有 sftp, ftp, ftps 等連線可選，在這裡我們選擇 sftp host SSH_SERVER user USER password 預設沒有使用的話，註解就好 port 沒有指定的話，註解就好 ssh_key_file 在 windows 環境中，設定成剛才儲存的 id_rsa.ppk 的路徑，例如 &quot;C:\\/Users\\/username\\/.ssh\\/id_rsa.ppk&quot; 同步設定 save_before_upload 上傳前，local 自動存檔 sync_down_on_open local 開啟檔案時，自動從遠端同步（保留 local 原 code） sync_skip_deletes 同步時，跳過刪除的檔案 sync_same_age 時間戳相同的檔案一併同步 confirm_downloads 下載時不要詢問 confirm_sync 同步時不要詢問 confirm_overwrite_newer 覆寫時不要詢問 同步檔案 remote_path 遠端同步的資料夾 ignore_regexes 同步資料夾下忽略的檔案 進行連線儲存配置文件後，即可在目錄按下滑鼠右鍵直接操作 參考資料 別讓 MIS 不開心，免密碼直接登入遠端的 SSH Server SublimeText3中使用SFTP編輯遠程伺服器文件","link":"/posts/83ff426e/"},{"title":"善用 Rebase 的 Git 工作流程","text":"前言筆記一下工作上慣用的 Git 工作流程，也大略提及一下 Merge 和 Rebase 的差異。 分支的合併完成作業的 Topic 分支，最終都會合併到 Integration 分支。合併分支有兩種方法：使用 merge 或 rebase。兩者都是合併歷史記錄，但是根據使用的方法合併後的分支歷史記錄有很大的差別。 Merge修改內容的歷史記錄會維持原狀，但是合併後的歷史紀錄會變得更複雜。 Git 在做 merge 時，會自動判斷現在的狀況是否適合是使用 fast-forward，或是我們可以透過加上 --ff 或是 --no-ff 來強制設定是否使用 fast-forward，差別如下： --no-ff 會多出一個 merge commit，而 --ff 會直接視為 master 分支上多出的 commit。可視需求決定要使用哪種。 Rebase修改內容的歷史記錄會接在要合併的分支後面，合併後的歷史記錄會比較清楚簡單，但是，會比使用 merge 更容易發生衝突。 Git 工作流程如果我們要將 feature branch 合併進 master 先切換到 feature branch，update 之後把遠端的 master 分支 rebase 進來git checkout branch-namegit remote updategit rebase origin/master 切換到本地 master，當然要先確認本地 master 與遠端同步git checkout mastergit merge --ff origin/master 把 feature branch 給 merge 進來 master，同時要保留新增功能用的commitgit merge --no-ff branch-name 將本地 master 推上遠端git push origin master","link":"/posts/9d63e457/"},{"title":"我在社群網路公司實習的日子","text":"前言今年四月，我投遞出人生的第一份履歷。 我使用該公司的社群網路服務已有近七年之久，於是當他們釋出前端工程師的實習職位，考慮不過半天、回過神來我已將履歷投至對方信箱——也很幸運地，在經過篩選與面試後，我獲得了暑期實習的合作機會。 經過一段時間沈澱之後，我想我是該好好寫篇文章，分享我在短短兩個月的實習過程之中的所見所學。 想像與現實 我所期望的實習型態是圍繞著特定專案的核心概念，再以實踐專案中的每個功能、使用者經驗優化為目標，去摸索與學習。 學生時代比較多是個人專案的獨立作業，專案規模較小型、缺乏有制度的組織規劃，所以希望能在實習期間更加瞭解或是涉身經歷這些大型專案的開發流程，增加大型專案前後端的合作經驗。技術層面則希望能先紮穩原生 JavaScript 的觀念再學習 Webpack、ES6 或其他現代框架，以理解背後目的和提升品質為前提去精進自我能力。 以上是我在實習前對工作型態的期許，然而在面試時前輩也跟我大致做了說明： 新技術如 Webpack / ES6 等等，公司在三年內大概都不會考慮投入專案 考量瀏覽器相容性問題 團隊人力不足以兼顧專案的重構與維護 撇開新技術不談，由於公司的專案已發展九年之久，可能會遇到以下情形 開發初期不是非常注重 software engineering principles，導致專案結構有些鬆散 當然也有些 legacy code 和稀泥 公司在這段實習期間可以提供 前端部分今年初做了許多 refactoring，可以給予 follow up / study 能直接投入大型專案的開發流程，累積經驗與學習 由於從事社群網路服務，公司與用戶間的交流相當直接開放，團隊也對於使用者經驗也有扎實的心得 正式上路我所負責的工作內容是與團隊中另一位後端實習工程師，一同開發 Bookmark feature，也就是讓使用者可以自由儲存他感興趣的 post 內容，提供更加便利的方式以再次瀏覽，同時也必須整合原有的專案結構去增加新 UI 、加入整個新功能。 實習初期主要花了一些時間去瞭解網站的專案架構，有些頭緒後才開始涉身投入開發過程。 接觸的新事物 MVC 架構 MakoPython 模板 LESSCSS 預處理器（寫過 SASS 所以上手很快） Handlebars.jsJavaScript 模板引擎 RESTful API與後端工程師溝通、分工合作 Git雖用過 github 此類遠端儲存庫，然而在這之前並沒有多人開發的版本控制經驗有些情況下可以下一些特別的 git 指令，只能說真的沒用過不會知道啊XD i18n作為一個國際化的社群網站，多國語言翻譯是一定要的啦 思想衝擊作為一個新鮮人，在實際投入業界以後，我開始對於過去在學校的所見所聞有了更加深刻的體會，同時也接收了一些未曾想過的開發新觀點。 從作業到產品在校作業往往有明確的要求與規範，然而實際開發新產品、新功能時，一切都從零開始。 成為開發者的同時，讓我比以前更加在意程式效能。雖然我不是後端、不負責資料庫的架構設計，但是掌握過去所學的核心科目（資料結構、演算法），確實對於寫好程式碼有極大幫助，至少會養成習慣去分析並且選擇最佳解決方法。 僅僅是功能寫好是遠遠不夠的，其中一個感受深刻的部分是資訊安全層面的考量，這次開發新功能我也對 CSRF、XSS 等攻擊手法做了不少功課，這些也都是在校時期較少接觸的部分。 提高程式碼的架構可讀性實習之中隨著元件越加越多，程式碼也被我越改越亂，當我意識到的同時已然變成了 Spaghetti code。 只好捧著程式碼去向前輩討教，也好好重新檢視了自己的 coding style——主要是疏於注意重複性程式碼，導致寫出維護性與可讀性不佳的程式碼。在撰寫起初也許不認為這段 code 包成 function 會有多大的效益，但是隨著程式越改越長，如果能好好管理、組織程式結構，積少成多下來會帶來可觀的影響。 打造最佳的使用者體驗就如同前面所說的，僅僅是功能寫好是遠遠不夠的，尤其前端工程師必須扛起整個網頁與使用者互動的門面，也開始讓我更常思考——要怎麼樣設計界面和規劃每個元件的事件，才能讓使用者容易上手、便於使用。我想這個部分我還需要多加琢磨。 後記 “Tell me and I forget, Teach me and I remember, Involve me and I learn.” - Benjamin Franklin 這段話可作為我這段日子以來的最佳寫照。兩個月的實習過得比想像中快，我也學到超乎原先預期的東西和觀念。 同時我也有感於一天只有二十四小時真的好不夠，開始工作的每一天，往往覺得自己越是學習越是不足，還有好多新事物在等著我去探索，也是和這個部落格的標題有所呼應吧。 最後很幸運地，原先團隊並沒有打算招收新的正職工程師，然而在這段期間經過公司的評估後，卻開給了我正職前端工程師的 offer。很高興獲得團隊的肯定，期許自己能在工作過程中學習更多，未來我也會好好全力以赴。","link":"/posts/20d7c148/"},{"title":"淺談 AMP (Accelerated Mobile Pages)","text":"前言網站速度、內容品質，這些都是 SEO的排名因素，同時也跟用戶體驗息息相關。而 Google 在2015 年正式發佈其獨有的 AMP 框架，中文為 加速版行動網頁 。 AMP是 Google 獨有的網頁框架，用來使行動裝置網頁能快速載入。如果你有架設 AMP框架，促進使用者體驗優化，也許會讓該頁面的 rankng 提升 ，同時這個框架也能夠非常有效的提升用戶體驗，未來 AMP將有可能會越來越被重視、且也有可能在搜尋排名中佔有更強的影響力。 Google 官方網站上也一步步演示了要如何架設 AMP 網站，主要可分為三大部分 AMP HTML AMP JS AMP Cache AMP HTML必須按照其規格撰寫： 以 &lt;!doctype html&gt; 開頭 其中第一個 tag 須為 &lt;html ⚡&gt; 或 &lt;html amp&gt; 表示為 AMP 網頁 必須包含 &lt;head&gt; 與 &lt;body&gt; 在 &lt;head&gt; 內必須以 &lt;meta charset=&quot;utf-8&quot;&gt; 作為第一個 tag 在 &lt;head&gt; 內必須包含 &lt;script async src=&quot;https://cdn.ampproject.org/v0.js&quot;&gt;&lt;/script&gt; tag 以引入 AMP JS 在 &lt;head&gt; 內必須包含 &lt;link rel=&quot;canonical&quot; href=&quot;$SOME_URL&quot;&gt; 其中 $SOME_URL 指向原本的非 AMP 網頁 在 &lt;head&gt; 內必須包含 &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,minimum-scale=1&quot;&gt; 並且建議加入 initial-scale=1 在 &lt;head&gt; 內必須包含 AMP Boilerplate Code 一個頁面可使用唯一一個 &lt;style amp-custom&gt; tag 來自訂 style，然而有些 css 屬性是禁用的，但更加上了一些額外的屬性幫助我們排版，可見相關規範。 而 HTML tags 也多以 AMP HTML tags 予以取代，像是 &lt;img&gt; 以 &lt;amp-img&gt; 替代，等等其他 component，這部分在下個段落會再細談。 AMP JS為了有效管理資源載入並提供客製化標籤，所以僅能使用 AMP 的元件，不允許使用任何第三方的外連 js file 或是 inline script，也就是說你只能使用 AMP 規範提供的 Component 元件 去完成網頁的行為，或者 iframe 一個非 AMP 頁面進來。 AMP 規範所提供 Component 大略可分為以下數類： Ads &amp; analytics Dynamic content Layout Media Presentation Social AMP CacheGoogle AMP Cache 會驗證你的網站是否為 AMP 網頁，如果網站符合其規範，Search Result 便會出現 AMP Cache 的結果，提供快取好的 AMP HTML 網頁。 同時這個搜尋結果會出現在一個新的區塊 Top Stories 版位，只有支援 AMP 的網頁才會出現，所以支援 AMP 網站等同於讓你的網頁多了一次機會出現在 Google search result 。 總結AMP 最大優點當然就是頁面的加載速度的顯著提升，在 Google 的搜尋結果更會多出一個 Top Stories 版位。 然而其諸多限制也帶來一些困擾，例如廣告投放、外站圖源、用戶登入問題，這些都只能依賴 AMP 規範提供的 Component 去完成，當然也不能設計一些太過複雜的介面。基於這些限制，開發者是否要引入該框架技術，就勢必得再多加思量了。 參考資料 Accelerated Mobile Pages (AMP) 實戰守則 AMP - Accelerated Mobile Pages 研究筆記","link":"/posts/dc7de635/"},{"title":"淺談 Polling, Comet, Websocket","text":"前言現在需要做即時回應與更新的網站已是愈來愈多，大至 Facebook、Twitter，小至即時聊天室的實作等等，在以前使用者只能靠著重新載入網頁才能獲得最新的資訊，但是這樣不但很浪費時間，也會佔用很多不必要的網路資源，並不是一個好的方式。 現在要實作這樣的功能，當然不能不知道一些網路推播技術 Internet Push technology——對這個名詞很陌生嗎？讓我們來看看維基百科的說明： 推播技術，是一種基於 Internet 通訊方式的伺服器推播，其中要求通訊的請求是由發布者或中央伺服器發起。與 pull/get 形成對比，資訊傳輸的相應一般由接收者或用戶端發起。 推動服務通常是基於提前的資訊預設定上。也就是所謂的 publish/subscribe 模型，客戶通過訂閱由伺服器提供各種資訊的頻道，不論何時都可以在其中一個頻道得到新的內容，同樣伺服器通過推播把資訊傳遞給相應的用戶端。 Polling 輪詢先來談談傳統的 Polling 輪詢技術，基本上原理很簡單，就是每隔一段固定時間就自動送出 Request 給伺服器，去跟伺服器要資料就對了！ 12345678910(function poll(){ setTimeout(function(){ $.ajax({ url: \"server\", success: function(data){ // Do something to update your view // Setup the next poll recursively poll(); }, dataType: \"json\"}); }, 30000);})(); 它有以下幾個特點： 容易實作 沒有跨瀏覽器的問題 不需要特殊伺服器做配合 但也有致命的缺點： 沒效率 浪費頻寬 這個做法是最老舊的方式，如果你已經事先知道伺服器上資料更新的頻率或時間，那麼也許用這樣的方式去做資料的同步更新。但現在許多的網頁應用程式上並不是這樣，你通常不會知道伺服器上的資料何時會更新，在伺服器沒有新資料時，瀏覽器如果也送出 Request，就會造成浪費網路資源的狀況。而 Comet 的出現解決了 Polling 這樣的弊端。 CometComet 在英文中也就是彗星的意思，顧名思義發出的 Request 會像彗星的尾巴般，將 Request 拉長，讓伺服器可以想傳資料就傳，不需要等客戶端先送請求伺服器再回傳，讓伺服器實時地將更新的資訊傳送到用戶端。 Comet 原先的精神是發出 Request 後不馬上結束，但這種做法卻引申出另一個問題那就是他會把傳統的 Web 伺服器（例如 Apache）的連線給佔住。所以 Comet 的技術得配合 Non-Blocking IO 的 Web 伺服器才能非同步處理。 後來發展出改良式的 Comet，伺服器會發一個長時間等待的 Request、當伺服器有資料 Response 時立刻斷掉、接著再發一個新的 Request。 這種改良式的 Comet 主要有兩種實作方式： Long Polling 長時間輪詢Long Polling 的原理是瀏覽器發出一個 Request，而伺服器讓這個 Request 持續開啟一段時間，若在這時間間隔內伺服器有資料就會回傳給客戶端，如果沒有則超時後伺服器會關上 Request。瀏覽器收到回應後，才會再重新發出一個 Request。 與 Polling 的不同之處就在於它是比較有效率的、可以等到 timeout 或拿到資料時再重新發、因此減少不必要的流量浪費。但是，這種情況下當傳送的訊息相當龐大時，可能會造成傳送不完全，使得控制失靈。 Streaming 串流Streaming 的原理則是讓伺服器與客戶端建立起一條持續的連線，為了使連線不中斷，伺服器每隔一段時間會發送 Response 給客戶端，確保連線不中斷，在 Streaming 中使用隱藏的 iframe tag，伺服器將資料傳入 iframe，交給其中的 javascript 去執行頁面的更新。 使用 Streaming 有一些缺點，由於他是建立在 HTTP 協定上的一種傳輸機制，訊息會被包裝起來，所以可能會因為 代理伺服器（proxy） 或 防火牆（firewall） 將其中的資料存放在 緩衝區 （Buffer） 中，造成傳送上的延遲，因此許多使用串流的 Comet 實作會在偵測到有代理伺服器的狀況時，改用長時間輪詢的方式處理。 瞭解 Comet 的原理後，我們其實可以發現 Comet 的最大瓶頸在於控制連線生命週期上需要反覆發出請求，而導致效能會較差，然而 WebSocket 的出現卻解決了這個問題，讓效能不會卡在連線生命週期，增強了資料傳輸的效率。 WebSocketWebSocket 是定義在 HTML5 標準中的一個新的網頁傳輸方式，可在一條連線上提供全雙工、雙向的資料傳輸。在這樣的標準下你可以很容易實作一個兼具可擴充性與即時性的網頁應用程式。 同時因為 WebSocket 提供瀏覽器一個 原生（native） 的 socket，所以直接解決了 Comet 架構很容易出錯的問題，而在整個架構的複雜度上也會比傳統的做法簡單很多。 簡單來說就是利用了新的協定建立了雙向的通道：當通道建立起來之後，Browser 可以隨時丟訊息給 Server、Server 可以隨時丟訊息給瀏覽器。唯一的小缺點就是可能有一些瀏覽器相容性的問題必須要解決，IE10 以前的版本並不支援。 在使用前，需要建立一個 WebSocket 物件。 123456 var ws = new WebSocket('ws://server'); ws.onmessage = function(message) { alert(message.data); ws.close() };ws.send('Hello WebSocket.'); WebSocket 可以選擇 ws 或是 wss 通訊協定。 ws 就相當於一般的 http wss 則相當於 https，需要伺服器可以支援 操作上十分單純，以 send() 送出訊息，而以 onmessage 事件接收訊息。呼叫 close() 即可結束連線。這中間無法改變通訊的 url。 比起前端的使用操作，在後端、伺服器上實作 WebSocket Protocol 倒是複雜多了。這部分就不多贅述。 總而言之，透過 WebSocket 建立永久連線，這種開放式連線可以讓客戶端和伺服器端之間隨時雙向交換資料，因此可降低延遲時間，改善資源使用效率，必定會是未來的潮流和趨勢。","link":"/posts/2b10bcfa/"},{"title":"資工系學士畢業新鮮人的自白","text":"前言 當初應屆推本校資工所都沒上 我很煩惱是不是該繼續往資工這條路走 – by young60509 上週在批踢踢軟體版看到網友 young60509 發表的文章，[請益] 該不該往資工走下去… 作為同屆畢業生我看了也難免有感而發。 這篇文章並不會告訴大家，我在資工系修過什麼課、做了什麼事、遇到什麼人、學到什麼樣的東西，主要是想說說就讀資工系的我，甫畢業之初的一些看法。 關於研究所或就業應該很多人畢業之後都會考慮要不要繼續往研究所進修，或是乾脆地投入職場。雖然我在校內也看過許多不假思索、二話不說就直接推甄研究所的人，你問他日後要往哪個領域走，選這個領域跟你日後職涯規劃有什麼關聯，他可能也回答不出所以然，不過我還是鼓勵大家在校時期多發掘自己的興趣。 瞭解自己的興趣，你才能更加具體去考量自己的職涯規劃。如果想做演算法或圖學等偏重理論的領域，那當然要唸研究所。但如果你是想要走強調業界實務應用的領域，像是網頁工程師好了，那就要想一想是要做應用系統研究、使用者經驗還是別的什麼相關領域，才能對你的職涯規劃有幫助。 事實上，我看到的學長姐還是有很大部分畢業之後的職位與在校研究領域完全無關的，擠到台G店/發哥/紅茶店等等電子大廠居多。當然，我一點也不否定向錢看齊的想法，只是如此一來相當於在研究所的經驗變成一種純粹的職前訓練，訓練吸收知識跟解決問題的邏輯能力，但你的研究本身卻不見得能幫助掌握日後工作的相關技術，這是比較可惜的一點。 另外作為應屆畢業生，我也驗證一下校內推甄資工所要成績30%會不會上這個說法，答案是不一定，3X% 落榜的大有人在，而更加具體來說：更加注重業外表現，只有成績達標是有些勉強的。 關於自學能力以及興趣[請益] 該不該往資工走下去… 這篇文章中樓主自己提到覺得自學能力差，不適合往資工領域發展，我認為更加精確的說法是：自主學習程式語言差。 無論就讀研究所或是直接就業，求財求生存的能力都跟你該領域的自學能力脫不了關係。這又回到了上面提到的興趣問題，如果在大學時期其實就能找到自己的興趣，並且在相關技術鑽研、做點 side project，我覺得是非常很有幫助的。也許你當時的興趣在日後無法學以致用，但以這份熱情去推動自身能力還是相當管用的。 ku399999: 學得慢又如何 是不是真慢都不知道 人生是長跑 持續學習努力絕對強過一狗票人 原文中網友 ku399999 這句話我也相當認同。自學這件事情不管是不是要走軟體業，都會一輩子跟著你。這不是難不難的問題，只是你願不願意花心力去適應而已。不怕做不好，先做再說吧！ 最後的最後，想記錄一句我最近也很喜歡的話。 “I’m a slow walker, but I never walk backwards.” - Abragam Lincoln","link":"/posts/cb4a7f47/"},{"title":"Hexo + GitHub Actions 打造自動部署","text":"前言這篇文章的出現，要從兩年前開始說起，那時候的我才剛開始摸 Hexo。當時的我比起其他平台，像是 Wordpress / Medium / Logdown 等等諸如此類，更喜歡 markdown 寫作方式，所以興致沖沖地架了個部落格。 但是很快地，過了大約一年左右便很少更新：為什麼會這樣呢？終歸一句當然還是懶啦。 主要是靜態網頁的佈署步驟太麻煩，必須滿足本地端有 Hexo 檔案的前提，我偏偏又喜歡用 HackMD 撰寫，一來一往之間步驟太過繁複。 久而久之，這段時間我傾向於使用 HackMD 整理個人筆記，懶得發表技術文章到 blog 上。——直到我注意到 GitHub 推出 CI/CD 服務，能幫助我解決這個麻煩！趁這個機會我打算順便打理 Hexo 架構，把菜鳥時期我搭建的部落格重新打掉，在 2020 前夕超進化！ 什麼是 Hexo想進一步瞭解更多，可以看看中文的 Hexo官方文件。 Hexo 是一個快速、簡單且強大的網誌框架。Hexo 使用 Markdown（或其他渲染引擎）解析您的文章，並在幾秒鐘內，透過漂亮的主題產生靜態檔案。 Hexo 使用 Node.js 搭建，速度快且免費，操作也相對簡單，更是支持 Markdown ，也有不少第三方外掛系統。 開始使用 Hexo準備工作 for Windows事前需要先安裝以下軟體 Node.js Github 當然你必須先擁有屬於自己的 github 帳號 登入 Github 之後，點選右上角 Create repositoryRepository name 必須是 github帳號.github.io 並選擇 Public 安裝好上述軟體後，就可以打開 Shell 鍵入 1npm install -g hexo-cli 透過 npm 就可以順利完成 Hexo 的安裝了 初始化和安裝接下來，我們要進行初始化和安裝，在 Shell 鍵入 12hexo initnpm install 跑完後，會在該資料夾底下新增所需要的檔案： 12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 等它跑完就可以開始寫新文章、架 blog 了，初步的建置就是如此簡單！ 建立新文章在 Shell 鍵入以下訊息 1hexo new \"postName\" # 建立一個新的文章 新文章的格式是 markdown，可以到 source/_post/postName.md 去修改 預覽 blog在 Shell 鍵入 12hexo g # (也可以打 hexo generate) 產生 bloghexo s # (也可以打 hexo server) 讓 blog 可在 local 端檢視 在 http://localhost:4000 就可以看見剛剛建好的 blog 使用 Hexo Deploy 部署安裝 hexo-deployer-git在 Shell 鍵入 1npm install hexo-deployer-git --save 修改 _config.yml接下來打開資料夾中的 _config.yml 編輯 deploy: 1234deploy: type: git repo: https://github.com/你的 github 帳號/你的專案名稱.git branch: master 完成設定以後，就可以發佈 blog 了 1hexo deploy # (也可以打 hexo d) 發佈 blog 發布之後，到專案的 Settings 啟用 GitHub PagesSource 的欄位就選剛才填的 deploy branch 等一段時間後，就會顯示啟用，就可以從 http://github帳號.github.io 連上 blog，完成初步工作！ 到這個階段其實已經可以利用 hexo 基本指令在本地端架 blog 了，只是為了完成自動化部署，我又加入了 CI/CD 流程！ 使用 GitHub Actions 實現 CI/CD什麼是 CI/CD CI（Continuous integration）為「持續性整合」，目的是讓專案能夠在每一次的變動中都能通過一些檢驗來確保專案品質。 CD（Continuous Deployment）則為「自動化部署」，讓專案能夠自動在每次變動後能以最新版本呈現。 事實上在業界應用中，可做的多了，像是：環境建置、單元測試、日誌紀錄、產品部署，可以簡化開發流程。而在 Hexo 的 blog 架設過程中，我們也能用它來達成自動部署！ GitHub Actions 是由 GitHub 提供的 CI/CD 服務，用於在 GitHub 建置、測試、封裝、發佈或部署任何專案。並可藉此建置端對端（end-to-end）CI/CD 功能。 建立 CI / CD 流程雛形Hexo 所提供的指令 hexo generate 其實是幫我們產生靜態網頁檔案，也就是 public 資料夾的內容。同時 hexo deploy 則將 public 資料夾中的內容推送到 _config.yml 中指定的遠端專案的分支中，並 完全覆蓋 當下分支的已有內容。 因此我們的目的其實是要把這份運用 Hexo 框架的原始碼資料夾推送到 GitHub 的另一個專案分支上，並藉由 GitHub 所提供的 CI/CD 服務幫我們進行產生靜態網頁檔案，再推送到指定專案分支，也就是我們現在建立起 GitHub Pages 的專案上。 把 Hexo 原始碼推送到 GitHub首先要把 Hexo 真正的 source code 推送到 GitHub 上建立一個新專案。將這個專案設為 Private，不公開他人瀏覽。 12345git initgit add --allgit commit -m &quot;First commit&quot;git remote add origin https://github.com/你的 github 帳號/新專案名稱.gitgit push -u origin master 建立 SSH Key在執行 Github Actions 的過程中，為了讓這段程式也可以把靜態網頁推送到原先我們所建立的專案上，必須建立一個 SSH Key 給它使用。 1ssh-keygen -f github-deploy-key # 然後三次 Enter 原始碼專案到 Setings 的 Secrets 去 Add a new secret Name 輸入 HEXO_DEPLOY_PRI Value 填上私鑰 github-actions-deploy 的內容 靜態網頁專案到 Setings 的 Deploy keys Title 輸入 HEXO_DEPLOY_PUB Key 填上公鑰 github-actions-deploy.pub 的內容 勾選 Allow write access 修改 _config.yml再打開資料夾中的 _config.yml 編輯 deploy:，要改成 ssh 連線才可以順利部署 1234deploy: type: git repo: git@github.com:你的github帳號/你的靜態網頁專案名稱.git branch: master 記得要 commit 後推送到專案上 設定 GitHub Actions回到原始碼專案，到 Actions 右上角選擇 Set up a workflow yourself 我的 main.yml 設定如下 123456789101112131415161718192021222324252627282930313233name: Deploy Blogon: [push]jobs: build: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v1 - name: Use Node.js 10.x uses: actions/setup-node@v1 with: node-version: \"10.x\" - name: Setup Hexo env env: HEXO_DEPLOY_PRI: ${{secrets.HEXO_DEPLOY_PRI}} run: | # set up private key for deploy mkdir -p ~/.ssh/ echo \"$HEXO_DEPLOY_PRI\" &gt; ~/.ssh/id_rsa chmod 600 ~/.ssh/id_rsa ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts git config --global user.name '使用者帳號' git config --global user.email '使用者信箱' # install dependencies npm i -g hexo-cli npm i - name: Deploy run: | # generate and depoly hexo g -d 把 main.yml 推上 workflows/ 後，再一次回到 Actions 確認 workflows 本地端檔案也要記得同步 main.yml 建立時推上去的 commit 12git remote updategit pull blog 變更生效每次要更動 blog 內容，像是發文或更改佈景等操作都要記得推上去 123git add .git commit -m &quot;變更內容&quot;git push origin master Github Actions 就會幫我們自動執行後續動作 備份原始碼既然都把原始碼 git 上去了，以後如果要在其他電腦架 blog，只需要 123git clone git@github.com:你的github帳號/你的原始碼專案名稱.gitcd 你的原始碼專案名稱npm install 順手完成了備份動作，是不是一石二鳥呢！ 線上發文現在讓我們試著用 GitHub 直接線上發文到專案原始碼底下的 source/_posts 選擇右上角 Create new file file name 即為文章標題.md，內容要調整成 hexo 文章格式 然後選擇 Commit new file如此以來就真正實現我想要的線上發布功能了！大功告成！ 踩坑經歷更改佈景主題在 Hexo Themes 中尋找你喜歡的佈景主題並保存到 themes 下之後打開 _config.yml，找到 theme: 修改成佈景名稱，也就是資料夾的對應名稱 如果是 git clone 下來的主題為了得以順利執行 actions，必須先將 themes 底下的 /.git 刪除，然後加入 12git add .\\themes\\主題名稱\\git add -f .\\themes\\主題名稱\\_config.yml 設定自定義域名重點同樣是域名服務商的設定，設定好之後記得要在 source 底下保存一個 CNAME 推上去才不會每次 push 後自訂域名設定都被覆蓋","link":"/posts/350dd70b/"}]}